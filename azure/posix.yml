parameters:
  name: ""
  vmImage: ""
  matrix: []

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      REPO_DIR: "scikit-learn"
      BUILD_COMMIT: "0.22.1"
      PLAT: "x86_64"
      NP_BUILD_DEP: "numpy==1.11.0"
      CYTHON_BUILD_DEP: "cython==0.29.14"
      SCIPY_BUILD_DEP: "scipy"
      JOBLIB_BUILD_DEP: "joblib==0.11"
      NIGHTLY_BUILD_COMMIT: "master"
      NIGHTLY_BUILD: "false"
      TEST_DEPENDS: "pytest"
      JUNITXML: "test-data.xml"
      TEST_DIR: '$(Agent.WorkFolder)/tmp_for_test'
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.matrix }}

    steps:
      - checkout: self
        submodules: true

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(MB_PYTHON_VERSION)
        displayName: Set python version

      - bash: |
          set -e

          if [ "$BUILD_REASON" == "Schedule" ]; then
            BUILD_COMMIT=$NIGHTLY_BUILD_COMMIT
          fi
          echo "Building scikit-learn@$BUILD_COMMIT"
          echo "##vso[task.setvariable variable=BUILD_COMMIT]$BUILD_COMMIT"

          # Platform variables used in multibuild scripts
          if [ `uname` == 'Darwin' ]; then
            echo "##vso[task.setvariable variable=TRAVIS_OS_NAME]osx"
            echo "##vso[task.setvariable variable=MACOSX_DEPLOYMENT_TARGET]10.9"
          else
            echo "##vso[task.setvariable variable=TRAVIS_OS_NAME]linux"
          fi

          # Store original Python path to be able to create test_venv pointing
          # to same Python version.
          PYTHON_EXE=`which python`
          echo "##vso[task.setvariable variable=PYTHON_EXE]$PYTHON_EXE"
        displayName: Define build env variables

      - bash: |
          set -e
          pip install virtualenv
          BUILD_DEPENDS="$NP_BUILD_DEP $CYTHON_BUILD_DEP $SCIPY_BUILD_DEP"

          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          source extra_functions.sh

          # Setup build dependencies
          before_install

          # OpenMP is not present on macOS by default
          setup_compiler
          clean_code $REPO_DIR $BUILD_COMMIT
          build_wheel $REPO_DIR $PLAT
          teardown_compiler
        displayName: Build wheel
        condition: or(ne(variables['Build.Reason'], 'Schedule'), ne(variables['Nightly.Build'], 'false'))

      - bash: |
          set -e
          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          source extra_functions.sh
          setup_test_venv
          # install_run $PLAT
          teardown_test_venv
        displayName: Install wheel and test
        condition: or(ne(variables['Build.Reason'], 'Schedule'), ne(variables['Nightly.Build'], 'false'))

      # - task: PublishTestResults@2
      #   inputs:
      #     testResultsFiles: '$(TEST_DIR)/$(JUNITXML)'
      #     testRunTitle: ${{ format('{0}-$(Agent.JobName)', parameters.name) }}
      #   displayName: 'Publish Test Results'
      #   condition: succeededOrFailed()

      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to PATH
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - bash: sudo chown -R $USER $CONDA
        displayName: Take ownership of conda installation
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - bash: |
          set -xe
          conda install -q -y anaconda-client
          if [ "$BUILD_REASON" == "Schedule" ]; then
            ANACONDA_ORG="scipy-wheels-nightly"
            TOKEN="$SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN"
          else
            ANACONDA_ORG="scikit-learn-wheels-staging"
            TOKEN="$SCIKIT_LEARN_STAGING_UPLOAD_TOKEN"
          fi
          if [ "$TOKEN" == "" ]; then
            echo "Undefined secret token for organization: $ANACONDA_ORG"
            exit 1
          fi
          # The --force option forces a replacement if the remote file already
          # exists.
          anaconda -t $TOKEN upload --force -u $ANACONDA_ORG wheelhouse/*.whl
          echo "PyPI-style index: https://pypi.anaconda.org/$ANACONDA_ORG/simple"
        env:
          # Secret variables need to mapped to env variables explicitly:
          SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN: $(SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN)
          SCIKIT_LEARN_STAGING_UPLOAD_TOKEN: $(SCIKIT_LEARN_STAGING_UPLOAD_TOKEN)
        displayName: Upload to anaconda.org
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
