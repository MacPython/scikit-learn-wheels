parameters:
  name: ""
  vmImage: ""
  matrix: []

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      REPO_DIR: "scikit-learn"
      BUILD_COMMIT: "0.22.1"
      PLAT: "x86_64"
      UNICODE_WIDTH: "32"
      NP_BUILD_DEP: "numpy==1.11.0"
      NP_TEST_DEP: "numpy"
      CYTHON_BUILD_DEP: "cython==0.29.14"
      CYTHON_TEST_DEP: "cython"
      SCIPY_BUILD_DEP: "scipy"
      SCIPY_TEST_DEP: "scipy"
      JOBLIB_BUILD_DEP: "joblb==0.11"
      JOBLIB_TEST_DEP: "joblib"
      DAILY_COMMIT: "master"
      DAILY_BUILD: "false"
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.matrix }}

    steps:
      - checkout: self
        submodules: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(MB_PYTHON_VERSION)
        displayName: Set python version
      - script: |
          set -e

          if [ "$BUILD_REASON" == "Schedule" ]; then
            if [ "$DAILY_BUILD" != "true" ]; then
              exit 0
            fi
            BUILD_COMMIT=$DAILY_COMMIT
          fi
          echo "Building scikit-learn-$BUILD_COMMIT"

          pip install virtualenv
          BUILD_DEPENDS="$NP_BUILD_DEP $CYTHON_BUILD_DEP $SCIPY_BUILD_DEP"
          TEST_DEPENDS="$NP_TEST_DEP pytest $CYTHON_TEST_DEP $SCIPY_TEST_DEP"

          if [ `uname` == 'Darwin' ]; then
            TRAVIS_OS_NAME='osx'
            export MACOSX_DEPLOYMENT_TARGET=10.9
          else
            TRAVIS_OS_NAME='linux'
          fi

          source multibuild/common_utils.sh
          source multibuild/travis_steps.sh
          before_install

          # OpenMP is not present on osx by default
          if [ $TRAVIS_OS_NAME == "osx" ]; then
            enable_openmp
          fi

          clean_code $REPO_DIR $BUILD_COMMIT
          build_wheel $REPO_DIR $PLAT

          if [ $TRAVIS_OS_NAME == "osx" ]; then
            disable_system_openmp
          fi

          # install_run $PLAT
        displayName: Build, install, and test
      - script: pip install twine wheel keyring artifacts-keyring
        displayName: Install twine and wheel
        condition: ne(variables['Build.Reason'], 'PullRequest')
      - task: TwineAuthenticate@1
        inputs:
          artifactFeed: sklearn-wheels-testing/sklearn-release
        displayName: Authenticate twine with artifact feed
        condition: ne(variables['Build.Reason'], 'PullRequest')
      - script: |
          cat $(PYPIRC_PATH)
          twine upload -r sklearn-release --config-file $(PYPIRC_PATH) \
          wheelhouse/*
        displayName: Upload to sklearn-release azure artifact feed
        condition: ne(variables['Build.Reason'], 'PullRequest')
