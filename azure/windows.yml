parameters:
  name: ""
  vmImage: ""
  matrix: []

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      BUILD_COMMIT: "0.22.1"
      SKLEARN_SKIP_NETWORK_TESTS: "1"
      NP_BUILD_DEP: "1.11.0"
      CYTHON_BUILD_DEP: "0.29.14"
      SCIPY_BUILD_DEP: "1.1.0"
      DAILY_COMMIT: "master"
      DAILY_BUILD: "false"
      PYTHON_ARCH: "x64"
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.matrix }}
    steps:
      - checkout: self
        submodules: true
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          architecture: $(PYTHON_ARCH)
        displayName: Set python version
      - bash: |
          echo PYTHON $PYTHON_VERSION $PYTHON_ARCH
          echo Build Reason $BUILD_REASON
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          pip --version
        displayName: Check that we have the expected version and architecture for Python
      - bash: |
          set -xe

          if [ "$BUILD_REASON" == "Schedule" ]; then
            if [ "$DAILY_BUILD" != "true" ]; then
              exit 0
            fi
            BUILD_COMMIT=$DAILY_COMMIT
          fi

          cd scikit-learn
          git checkout $BUILD_COMMIT
          git clean -fxd
          git reset --hard
        displayName: Checkout commit
      - bash: |
          set -xe

          if [ "$BUILD_REASON" == "Schedule" ]; then
            if [ "$DAILY_BUILD" != "true" ]; then
              exit 0
            fi
            BUILD_COMMIT=$DAILY_COMMIT
          fi
          echo "Building scikit-learn-$BUILD_COMMIT"

          pip install --timeout=60 numpy==$NP_BUILD_DEP
          pip install --timeout=60 pytest wheel joblib scipy==$SCIPY_BUILD_DEP Cython==$CYTHON_BUILD_DEP
          pip install twine

          pushd scikit-learn
          python setup.py build
          python ../appveyor/vendor_vcomp140.py
          python setup.py bdist_wheel
          ls dist
          twine check dist/*
          pip install --pre --no-index --find-links dist/ scikit-learn
          popd

          mkdir tmp
          cd tmp

          # Install the newest version of numpy for the tests: the goal is to ensure
          # REM that the scikit-learn wheels are binary compatible both with the old numpy
           version against which they were built and the newest numpy version at the
          # time of the release, that is the version of numpy that users are most
          # likely to use.
          # pip install -U --timeout=60 numpy
          # pytest -rs --pyargs sklearn
        displayName: Build, install, and test
      - bash: |
          set -xe
          pip install twine wheel keyring artifacts-keyring
        displayName: Install twine keyring and artifacts-keyring
        condition: ne(variables['Build.Reason'], 'PullRequest')

      - task: TwineAuthenticate@1
        inputs:
          artifactFeed: sklearn-wheels-testing/sklearn-release
        displayName: Authenticate twine with artifact feed
        condition: ne(variables['Build.Reason'], 'PullRequest')

      - bash: |
          twine upload -r sklearn-release --config-file $(PYPIRC_PATH) \
          dist/*
        displayName: Upload to sklearn-release azure artifact feed
        condition: ne(variables['Build.Reason'], 'PullRequest')
