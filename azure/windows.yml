parameters:
  name: ""
  vmImage: ""
  matrix: []

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      BUILD_COMMIT: "0.22.1"
      SKLEARN_SKIP_NETWORK_TESTS: "1"
      NP_BUILD_DEP: "1.11.0"
      CYTHON_BUILD_DEP: "0.29.14"
      SCIPY_BUILD_DEP: "1.1.0"
      NIGHTLY_BUILD_COMMIT: "master"
      NIGHTLY_BUILD: "false"
      PYTHON_ARCH: "x64"
      TEST_DEPENDS: "pytest"
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.matrix }}
    steps:
      - checkout: self
        submodules: true

      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          architecture: $(PYTHON_ARCH)
        displayName: Set python version

      - bash: |
          set -e

          echo PYTHON $PYTHON_VERSION $PYTHON_ARCH
          echo Build Reason $BUILD_REASON
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          pip --version

          # Store original Python path to be able to create test_venv pointing
          # to same Python version.
          PYTHON_EXE=`which python`
          echo "##vso[task.setvariable variable=PYTHON_EXE]$PYTHON_EXE"
        displayName: Check that we have the expected version and architecture for Python

      - bash: |
          set -e

          if [ "$BUILD_REASON" == "Schedule" ]; then
            BUILD_COMMIT=$NIGHTLY_BUILD_COMMIT
          fi
          echo "Building scikit-learn-$BUILD_COMMIT"
          echo "##vso[task.setvariable variable=BUILD_COMMIT]$BUILD_COMMIT"

          cd scikit-learn
          git checkout $BUILD_COMMIT
          git clean -fxd
          git reset --hard
        displayName: Checkout commit
        condition: or(ne(variables['Build.Reason'], 'Schedule'), ne(variables['Nightly.Build'], 'false'))

      - bash: |
          set -e

          pip install --timeout=60 numpy==$NP_BUILD_DEP
          pip install --timeout=60 pytest wheel joblib scipy==$SCIPY_BUILD_DEP Cython==$CYTHON_BUILD_DEP
          pip install twine

          pushd scikit-learn
          python setup.py build
          python ../appveyor/vendor_vcomp140.py
          python setup.py bdist_wheel
          ls dist
          twine check dist/*
          popd
        displayName: Build wheel
        condition: or(ne(variables['Build.Reason'], 'Schedule'), ne(variables['Nightly.Build'], 'false'))

      - bash: |
          set -e
          source extra_functions.sh
          setup_test_venv
          pip install scikit-learn/dist/scikit_learn-*.whl
          mkdir tmp
          pushd tmp
          # pytest -rs --pyargs sklearn
          popd
          teardown_test_venv
        displayName: Install wheel and test
        condition: or(ne(variables['Build.Reason'], 'Schedule'), ne(variables['Nightly.Build'], 'false'))

      - script: echo "##vso[task.prependpath]$CONDA/Scripts"
        displayName: Add conda to PATH
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - script: |
          set -xe
          conda install -y anaconda-client
          if [ "$BUILD_REASON" == "Schedule" ]; then
            ANACONDA_ORG="scipy-wheels-nightly"
            TOKEN="$SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN"
          else
            ANACONDA_ORG="scikit-learn-wheels-staging"
            TOKEN="$SCIKIT_LEARN_STAGING_UPLOAD_TOKEN"
          fi
          if [ "$TOKEN" == "" ]; then
            echo "Undefined anaconda secret upload token for $ANACONDA_ORG"
            exit 1
          fi
          anaconda -t $TOKEN upload -u $ANACONDA_ORG scikit-learn/dist/scikit_learn-*.whl
          echo "Uploaded to https://anaconda.org/$ANACONDA_ORG/scikit-learn"
          echo "PyPI-style index: https://pypi.anaconda.org/$ANACONDA_ORG/simple"
        env:
          # Secret variables need to mapped to env variables explicitly:
          SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN: $(SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN)
          SCIKIT_LEARN_STAGING_UPLOAD_TOKEN: $(SCIKIT_LEARN_STAGING_UPLOAD_TOKEN)
          displayName: Upload to anaconda.org
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
